# Generated by Django 4.2.21 on 2025-06-24 17:40

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('email', models.EmailField(help_text='Email do usuário', max_length=254, unique=True, verbose_name='Email')),
                ('user_type', models.CharField(choices=[('PF', 'Pessoa Física'), ('PJ', 'Pessoa Jurídica')], help_text='Tipo de usuário (PF ou PJ)', max_length=2, verbose_name='Tipo de Usuário')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PersonProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Nome completo do usuário', max_length=255, null=True, verbose_name='Nome Completo')),
                ('cpf', models.CharField(blank=True, help_text='CPF do usuário', max_length=14, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='CPF deve estar no formato 000.000.000-00', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF')),
                ('phone', models.CharField(blank=True, help_text='Telefone do usuário', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato (00) 00000-0000', regex='^\\(\\d{2}\\) \\d{5}-\\d{4}$')], verbose_name='Telefone')),
                ('position', models.CharField(blank=True, help_text='Cargo ou função do usuário', max_length=100, null=True, verbose_name='Cargo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='person_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Perfil de Pessoa Física',
                'verbose_name_plural': 'Perfis de Pessoas Físicas',
            },
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(blank=True, help_text='Razão social da empresa', max_length=255, null=True, verbose_name='Razão Social')),
                ('trade_name', models.CharField(blank=True, help_text='Nome fantasia da empresa', max_length=255, null=True, verbose_name='Nome Fantasia')),
                ('cnpj', models.CharField(blank=True, help_text='CNPJ da empresa', max_length=18, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='CNPJ deve estar no formato 00.000.000/0000-00', regex='^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$')], verbose_name='CNPJ')),
                ('state_registration', models.CharField(blank=True, help_text='Inscrição estadual da empresa', max_length=20, null=True, verbose_name='Inscrição Estadual')),
                ('municipal_registration', models.CharField(blank=True, help_text='Inscrição municipal da empresa', max_length=20, null=True, verbose_name='Inscrição Municipal')),
                ('responsible_name', models.CharField(blank=True, help_text='Nome do responsável pela empresa', max_length=255, null=True, verbose_name='Nome do Responsável')),
                ('phone1', models.CharField(blank=True, help_text='Telefone principal da empresa', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato (00) 00000-0000', regex='^\\(\\d{2}\\) \\d{5}-\\d{4}$')], verbose_name='Telefone Principal')),
                ('phone2', models.CharField(blank=True, help_text='Telefone secundário da empresa', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Telefone deve estar no formato (00) 00000-0000', regex='^\\(\\d{2}\\) \\d{5}-\\d{4}$')], verbose_name='Telefone Secundário')),
                ('website', models.URLField(blank=True, help_text='Website da empresa', null=True, verbose_name='Website')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='company_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Perfil de Empresa',
                'verbose_name_plural': 'Perfis de Empresas',
            },
        ),
    ]
